type User {
  email: String @unique
  name: String
  quests: [Quest] @relation(name: "user_quests")
  #knight: Knight @relation(name: "user_knight")
  heros: [Hero] @relation(name: "user_knights")
  jobs: [Job] @relation(name: "user_jobs")
  role: UserRole!
}

enum UserRole {
  # Admin | Able to edit, post & delete Quests and Users & add Invites, Accept Job
  ADMIN
  # Moderator | Able to review, edit and accept Quests
  MODERATOR
  # Knights | Able to view quests, Join them, Submit Quests, nominate a Hero, Post to Job board
  KNIGHT
  # Hero | Able to edit their profile, or delete themself from a Quest, nominate a Peer, or post to Job Board
  HERO
}

type Quest {
  name: String
  description: String
  heros: [Hero] @relation(name: "quest_heros")
  image: String
  owner: User! @relation(name: "user_quests")
  # need to set permissions that only MODERATOR could not set
  isAccepted: Boolean
  isBeingReviewed: Boolean
  knights: [Knight] @relation(name: "quest_knights")
  category: Category
  moderator: User
  isClaimed: Boolean
}

enum Category {
  SUSTAINABILITY_HUMAN_DEVELOPMENT
  TECHNOLOGY_INFRASTRUCTURE_ARTIFICIAL_INTELLIGENCE
}

type Knight {
  name: String
  avatar: String
  twitter: String
  website: String
  quest: Quest @relation(name: "quest_knights")
  owner: User!
  heros: [Hero]
}

type Hero {
  name: String
  description: String
  website: String
  twitter: String
  avatar: String
  wikipedia: String
  knight: Knight
  quest: Quest @relation(name: "quest_heros")
  owner: User
  isAccepted: Boolean
  isBeingReviewed: Boolean
  moderator: User @relation(name: "user_knights")
  isClaimed: Boolean
}

type Job {
  name: String
  website: String
  description: String
  # need to set permissions that only ADMIN could not set
  isAccepted: Boolean
  isBeingReviewed: Boolean
  owner: User! @relation(name: "user_jobs")
}

type Invite {
  inviteCode: Int!
  email: String!
  role: UserRole!
}

type Query {
  getQuests: [Quest!]
  getInvites: [Invite!]
  getHeros: [Hero!]
}
