type User {
  email: String @unique
  name: String
  hats: [DadHat] @relation
}

type DadHat {
  name: String
  image: String
  owner: User!
  markers: [Marker]
  rating: Rating @relation
}

type Marker @embedded {
  left: Int
  top: Int
  text: String
  link: String
  color: String
  fontFamily: String
  padding: Int
  width: Int
  height: Int
  rotationAngle: Int
  typeName: String
  state: String
  dadHat: DadHat
  visualTransformMatrix: VtM
  containerTransformMatrix: VtM
}

type VtM @embedded {
  a: Int
  b: Int
  c: Int
  d: Int
  e: Int
  f: Int
}

type Rating {
  views: Int
  loves: Int
  owner: DadHat
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  password: String!
}

type Mutation {
  loginUser(input: LoginUserInput): String! @resolver(name: "login_user")
  createUser(input: CreateUserInput): User! @resolver(name: "create_user")
}

type Query {
  getHats: [DadHat!]
}
