type User {
  email: String @unique
  name: String
  quests: [Quest] @relation
  knight: Knight
  jobs: [Job] @relation
  role: UserRole!
}

enum UserRole {
  # Admin | Able to edit, post & delete Quests and Users & add Invites, Accept Job
  ADMIN
  # Moderator | Able to review, edit and accept Quests
  MODERATOR
  # Knights | Able to view quests, Join them, Submit Quests, nominate a Hero, Post to Job board
  KNIGHT
  # Hero | Able to edit their profile, or delete themself from a Quest, nominate a Peer, or post to Job Board
  HERO
}

type Quest {
  name: String
  description: String
  heros: [Hero] @relation
  image: String
  owner: User!
  # need to set permissions that only MODERATOR could not set
  isAccepted: Boolean
  isBeingReviewed: Boolean
  knights: [Knight] @relation
}

type Knight {
  name: String
  avatar: String
  twitter: String
  website: String
  quest: Quest
  owner: User! @relation
}

type Hero {
  name: String
  description: String
  website: String
  twitter: String
  avatar: String
  quest: Quest
}

type Job {
  name: String
  website: String
  description: String
  # need to set permissions that only ADMIN could not set
  isAccepted: Boolean
  isBeingReviewed: Boolean
  owner: User!
}

type Invite {
  inviteCode: Int!
  email: String!
  role: UserRole!
}

type Query {
  getQuests: [Quest!]
  getInvites: [Invite!]
}
